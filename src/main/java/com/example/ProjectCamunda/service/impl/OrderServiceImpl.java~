package com.example.ProjectCamunda.service.impl;

import com.example.ProjectCamunda.dto.OrderDto;
import com.example.ProjectCamunda.entity.CustomerDetails;
import com.example.ProjectCamunda.entity.Inventory;
import com.example.ProjectCamunda.repository.InventoryRepository;
import com.example.ProjectCamunda.repository.OrderRepository;
import com.example.ProjectCamunda.service.IOrderService;
import lombok.AllArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import java.util.Optional;

@Service
@AllArgsConstructor
public class OrderServiceImpl implements IOrderService {

    private static final Logger log = LoggerFactory.getLogger(OrderServiceImpl.class);
    private OrderRepository orderRepository;
    private InventoryRepository inventoryRepository;

    @Override
    public void createOrder(OrderDto order) {
        Optional<Inventory> inventoryOptional = inventoryRepository.findById(order.getItemId());
        if (inventoryOptional.isPresent()) {
            Inventory inventory = inventoryOptional.get();
            if (inventory.getInventoryBalance() < order.getNoOfItems()) {
                throw new RuntimeException("Not enough inventory");
            } else if (inventory.getInventoryBalance() == 0) {
                throw new RuntimeException("Item type not available");
            } else if (order.getNoOfItems() <= 0) {
                throw new RuntimeException("No. of items should be greater than 0");
            } else {

                CustomerDetails customerDetails = new CustomerDetails();
                customerDetails.setCustomerName(order.getCustomerDetails().getCustomerName());
                customerDetails.setCustomerType(order.getCustomerDetails().getCustomerType());
                customerDetails.setMobileNumber(order.getCustomerDetails().getMobileNumber());
                customerDetails.setPincode(order.getCustomerDetails().getPincode());

                order.setCustomerDetails(customerDetails);

                log.info("Order created" + order);
                orderRepository.save(order);
                inventory.setInventoryBalance(inventory.getInventoryBalance() - order.getNoOfItems());
                inventoryRepository.save(inventory);
            }
        } else {
            throw new RuntimeException("Inventory not found");
        }
    }
}